# Generated by Django 5.2.4 on 2025-07-28 00:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Carrera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=250, unique=True, verbose_name='Nombre de la Carrera')),
                ('codigo', models.CharField(max_length=10, unique=True, verbose_name='Código de la Carrera')),
                ('total_unidades_credito', models.IntegerField(verbose_name='Total Unidades de Crédito')),
            ],
            options={
                'verbose_name': 'Carrera',
                'verbose_name_plural': 'Carreras',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Universidad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, unique=True, verbose_name='Nombre de la Universidad')),
            ],
            options={
                'verbose_name': 'Universidad',
                'verbose_name_plural': 'Universidades',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('carrera_actual', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='estudiantes', to='malla_curricular.carrera', verbose_name='Carrera Actual del Estudiante')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Materia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, verbose_name='Nombre de la Materia')),
                ('codigo', models.CharField(max_length=15, unique=True, verbose_name='Código de la Materia')),
                ('unidades_credito', models.IntegerField(verbose_name='Unidades de Crédito')),
                ('semestre_sugerido', models.IntegerField(blank=True, null=True, verbose_name='Semestre Sugerido')),
                ('creditos_prerrequisito', models.IntegerField(default=0, help_text='Unidades de crédito mínimas acumuladas para cursar esta materia.', verbose_name='Créditos Prerrequisito Acumulados')),
                ('carrera', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materias', to='malla_curricular.carrera', verbose_name='Carrera a la que pertenece')),
                ('prerrequisitos', models.ManyToManyField(blank=True, help_text='Materias que deben ser cursadas antes.', related_name='materia_siguiente', to='malla_curricular.materia', verbose_name='Prerrequisitos por Materia')),
            ],
            options={
                'verbose_name': 'Materia',
                'verbose_name_plural': 'Materias',
                'ordering': ['semestre_sugerido', 'nombre'],
                'unique_together': {('nombre', 'carrera')},
            },
        ),
        migrations.CreateModel(
            name='Periodo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=255, verbose_name='Nombre del Período')),
                ('año', models.IntegerField(verbose_name='Año')),
                ('tipo_periodo', models.CharField(choices=[('regular', 'Regular'), ('intensivo', 'Intensivo')], default='regular', max_length=50, verbose_name='Tipo de Período')),
            ],
            options={
                'verbose_name': 'Período',
                'verbose_name_plural': 'Períodos',
                'ordering': ['-año', 'nombre'],
                'unique_together': {('nombre', 'año', 'tipo_periodo')},
            },
        ),
        migrations.AddField(
            model_name='carrera',
            name='universidad',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carreras', to='malla_curricular.universidad', verbose_name='Universidad a la que pertenece'),
        ),
        migrations.CreateModel(
            name='MateriaUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado', models.CharField(choices=[('aprobada', 'Aprobada'), ('cursando', 'Cursando'), ('pendiente', 'Pendiente')], default='pendiente', max_length=50, verbose_name='Estado de la Materia')),
                ('materia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usuarios_cursando', to='malla_curricular.materia')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materias_cursadas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Materia por Usuario',
                'verbose_name_plural': 'Materias por Usuario',
                'ordering': ['usuario', 'materia'],
                'unique_together': {('usuario', 'materia')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='carrera',
            unique_together={('nombre', 'universidad')},
        ),
    ]
